#version 400

layout(vertices = 4) out;

uniform vec4 eyePos; //camera position
uniform bool fixCracking;


int getTesLevel(float d){
    float d_min = 5, d_max = 100;
    float l_low = 30, l_high = 100;
    
    int level = int((d - d_min) / (d_max - d_min) * (l_low - l_high) + l_high);

    if (level < l_low){
        level = int(l_low);
    }
    if (level > l_high){
       level = int(l_high);
    }
    return level;
}


void main()
{
    int innerLevel;
    int outerLevels[4];
    
    vec4 patch_center = (gl_in[0].gl_Position
                    + gl_in[1].gl_Position
                    + gl_in[2].gl_Position
                    + gl_in[3].gl_Position) * 0.25; 
   
    float patch_d = distance(eyePos, patch_center); 
    
    innerLevel = getTesLevel(patch_d);
   
    if (fixCracking){
        for (int i = 0; i < 4; i++){
            vec4 side_center = (gl_in[int(mod(i - 1, 4))].gl_Position
                                + gl_in[i].gl_Position) * 0.5;            
            float side_d = distance(eyePos, side_center);            
            outerLevels[i] = getTesLevel(side_d);
        }
    }else{
        for (int i = 0; i < 4; i++){
             outerLevels[i] = innerLevel;
        }
    }
   
     gl_out[gl_InvocationID].gl_Position
      = gl_in[gl_InvocationID].gl_Position;

    gl_TessLevelOuter[0] = outerLevels[0];
    gl_TessLevelOuter[1] = outerLevels[1];
    gl_TessLevelOuter[2] = outerLevels[2];
    gl_TessLevelOuter[3] = outerLevels[3];
    gl_TessLevelInner[0] = innerLevel;
    gl_TessLevelInner[1] = innerLevel;
}

